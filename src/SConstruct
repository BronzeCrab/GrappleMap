import os

# release:
env = Environment(ENV=os.environ, CCFLAGS='-Wall -Wextra -pedantic -std=c++1y -DNDEBUG -O3 -DUSE_FTGL')
env.ParseConfig('pkg-config --cflags --libs libgvc')

# profiling:
# env = Environment(ENV=os.environ, CCFLAGS='-Wall -Wextra -pedantic -std=c++1y -DNDEBUG -O3 -pg', LINKFLAGS='-pg')

# consistency testing:
# env = Environment(ENV=os.environ, CCFLAGS='-Wall -Wextra -pedantic -std=c++1y -O3 -DUSE_FTGL')

# debugging:
#env = Environment(ENV=os.environ, CCFLAGS='-Wall -Wextra -pedantic -std=c++1y -g')

emscripten_compile_flags = '-Wall -Wextra -Wno-dollar-in-identifier-extension -Wno-vla-extension -pedantic -std=c++1y -DNDEBUG -O3 -s TOTAL_MEMORY=134217728'
emscripten_gfx_flags = '-s USE_WEBGL2=1 -s FULL_ES3=1 -s USE_GLFW=3'

em_env = Environment(
	ENV=os.environ,
	CC='emcc', CXX='em++',
	CCFLAGS=emscripten_compile_flags + ' ' + emscripten_gfx_flags,
	OBJSUFFIX=".web.o",
	LINKFLAGS=emscripten_compile_flags + ' ' + emscripten_gfx_flags + ' --bind --preload-file triangle.vertexshader --preload-file triangle.fragmentshader --preload-file ../GrappleMap.txt@GrappleMap.txt')

em_nogfx = Environment(
	ENV=os.environ,
	CC='emcc', CXX='em++',
	CCFLAGS=emscripten_compile_flags,
	OBJSUFFIX=".webnogfx.o",
	LINKFLAGS=emscripten_compile_flags + ' --bind --preload-file ../GrappleMap.txt@GrappleMap.txt')

common = env.Object(['graph.cpp', 'graph_util.cpp', 'positions.cpp', 'viables.cpp', 'persistence.cpp', 'paths.cpp', 'playback.cpp', 'icosphere.cpp', 'editor.cpp', 'metadata.cpp'])
rendering = env.Object(['rendering.cpp', 'playerdrawer.cpp'])
images = env.Object('images.cpp')
cmdlibs = ['boost_program_options']
guilibs = ['GL', 'GLU', 'glfw', 'ftgl'] + cmdlibs
vruilibs = ["GL", "GLU", "ftgl", "Vrui.g++-3", "Geometry.g++-3", "GLGeometry.g++-3", "GLSupport.g++-3", "Threads.g++-3", "Misc.g++-3", "Math.g++-3", "Plugins.g++-3", "GLMotif.g++-3"] + cmdlibs
video = env.Object(['video_player.cpp', 'video_monitor.cpp'])

glfw_editor   = env.Program('grapplemap-glfw-editor', ['glfw_editor.cpp', rendering, common, video], LIBS=guilibs+vruilibs+['xine', 'boost_regex'])
vr_editor     = env.Program('grapplemap-vr-editor', ['vr_editor.cpp', 'vr_joint_editor.cpp', 'vr_joint_browser.cpp', 'VruiXine.cpp', rendering, common, video], LIBS=vruilibs+['xine', 'boost_regex'])
glfw_playback = env.Program('grapplemap-glfw-playback', ['glfw_playback.cpp', rendering, common], LIBS=guilibs)
vr_playback   = env.Program('grapplemap-vr-playback', ['vr_playback.cpp', rendering, common], LIBS=vruilibs)
todot         = env.Program('grapplemap-todot', ['todot.cpp', common], LIBS=cmdlibs)
dbtojs        = env.Program('grapplemap-dbtojs', ['dbtojs.cpp', common], LIBS=cmdlibs)
mkpospages    = env.Program('grapplemap-mkpospages', ['mkpospages.cpp', images, rendering, common],
				LIBS = ['OSMesa', 'GLU', 'ftgl', 'boost_program_options', 'png', 'boost_filesystem', 'boost_system', 'pthread', 'gvc', 'cgraph'])
mkvid      =env.Program('grapplemap-mkvid', ['makevideo.cpp', images, rendering, common],
				LIBS = ['OSMesa', 'GLU', 'boost_program_options', 'png', 'boost_filesystem', 'boost_system', 'ftgl', 'gvc', 'cgraph'])

em_editor = em_env.Program('grapplemap_editor.js', ['web_editor.cpp', 'graph.cpp', 'graph_util.cpp', 'positions.cpp', 'viables.cpp', 'persistence.cpp', 'paths.cpp', 'playback.cpp', 'icosphere.cpp', 'editor.cpp', 'metadata.cpp', 'rendering.cpp', 'playerdrawer.cpp'])

db_loader = em_nogfx.Program('grapplemap_db_loader.js', ['web_db_loader.cpp', 'graph.cpp', 'graph_util.cpp', 'positions.cpp', 'persistence.cpp', 'paths.cpp', 'metadata.cpp'])

env.Alias('noX', [dbtojs, mkpospages, mkvid, em_editor, db_loader]);
